yazi ~/.config/
nano `/Users/dgarciar/Library/Application Support/nushell/env.nu`
yazi ~/.config/
nano `/Users/dgarciar/Library/Application Support/nushell/config.nu`
nvim ~/.config/nushell/config.nu
exit
[[name info]; [Cairo {founded: 969}] [Kyoto {founded: 794}]] | sort-by info.founded
ls | where type == file | sort-by { get name | path parse | get extensioo }
ls | where type == file | sort-by { get name | path parse | get extension }
exit
yazi ~/.config/nix-darwin/
alias
exit
tmux attach -t saba
exit
yazi ~/.config/nix-darwin/
chezmoi diff
yazi ~/.config/nix-darwin/
exit
ls -l
nano 400450_20231005030003J.txt
awk '{print substr($0, 1, 16), substr($0, 17, 16), substr($0, 33, 16), substr($0, 49, 16), substr($0, 65, 8), substr($0, 73, 8), substr($0, 81, 8), substr($0, 89, 8)}' 400450_20231005030003J.txt > prueba.csv
sed 's/\(..........\)\(..........\)\(..........\)\(..........\)\(........\)\(........\)\(........\)\(........\)/\1,\2,\3,\4,\5,\6,\7,\8/g' 400450_20231005030003J.txt > prueba.csv
nano 400450_20231005030003JCSV.csv
open 400450_20231005030003JCSV.csv --raw --separator ';' | get column3 column4 | math sum<\n>
open 400450_20231005030003JCSV.csv --raw | split column ';' | select column3 column4 | math sum<\n>
open 400450_20231005030003JCSV.csv --raw | split column ';' | select column3 column4 | into int | math sum<\n>
open 400450_20231005030003JCSV.csv --raw | split column ';' | select column3 column4 | each { |it| $it | into float } | math sum<\n>
open 400450_20231005030003JCSV.csv --raw | split column ';'
open 400450_20231005030003JCSV.csv | split column ';'
open 400450_20231005030003JCSV.csv --raw | split column ';'
open 400450_20231005030003JCSV.csv --raw | str replace ',' '' | split column ';'
open 400450_20231005030003JCSV.csv --raw | str replace ',' '' | split column ';' | select column3 column4 | each { |it| $it | into float } | math sum<\n>
open 400450_20231005030003JCSV.csv --raw | str replace ',' '' | split column ';' | get column3 column4 | each { |it| $it | into float } | math sum<\n>
open 400450_20231005030003JCSV.csv --raw | split column ';' | select column3 column4
open 400450_20231005030003JCSV.csv --raw | split column ';' | lines | select column3 column4
open 400450_20231005030003JCSV.csv | split column ';' | lines | select column3 column4
open 400450_20231005030003JCSV.csv | split column ';' | select column3 column4
open 400450_20231005030003JCSV.csv
cat 400450_20231005030003JCSV.csv
bat 400450_20231005030003JCSV.csv
nano 400450_20231005030003JCSV.csv
open 400450_20231005030003JCSV.csv
open 400450_20231005030003JCSV.csv | split column ';' | select column3 column4
open 400450_20231005030003JCSV.csv | split column ";" | select column3 column4
open 400450_20231005030003JCSV.csv | split column ';' | select column3 column4
open 400450_20231005030003JCSV.csv | split column ';' | into table | select column3 column4
nano 400450_20231005030003JCSV.csv
open 400450_20231005030003JCSV.csv | split row "\n" | split column ";" | into table | select column2 column3
open 400450_20231005030003JCSV.csv | <\n>    split row "\n" | <\n>    split column ";" | <\n>    into table | <\n>    select column2 column3 | <\n>    update column2 {|it| $it | str replace "," "." | into decimal } |<\n>    update column3 {|it| $it | str replace "," "." | into decimal } |<\n>    math sum
# Para la columna 3<\n>open 400450_20231005030003JCSV.csv | <\n>    split row "\n" | <\n>    split column ";" | <\n>    into table | <\n>    get column2 |<\n>    into decimal |<\n>    math sum<\n><\n># Para la columna 4<\n>open 400450_20231005030003JCSV.csv | <\n>    split row "\n" | <\n>    split column ";" | <\n>    into table | <\n>    get column3 |<\n>    into decimal |<\n>    math sum
open 400450_20231005030003JCSV.csv | <\n>    split row "\n" | <\n>    split column ";" | <\n>    into table | <\n>    get column2 |<\n>    into decimal |<\n>    math sum
open 400450_20231005030003JCSV.csv | <\n>    split row "\n" | <\n>    split column ";" | <\n>    into table | <\n>    get column3 |<\n>    into decimal |<\n>    math sum
bat 400450_20231005030003JCSV.csv
help: Usage: into
help: into
help into
open 400450_20231005030003JCSV.csv | <\n>    split row "\n" | <\n>    split column ";" | <\n>    select column2 column3
help split
open 400450_20231005030003JCSV.csv | <\n>    into string |<\n>    split row "\n" | <\n>    split column ";" |<\n>    select column2 column3
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | select column3 column4<\n>
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | select column3 column4 | each { |it| $it | into float } | math sum<\n>
bat 400450_20231005030003JCSV.csv
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | select column4 column5 | each { |it| $it | into float } | math sum<\n>
open 400450_20231005030003JCSV.csv --raw | lines | split column ';'
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | select column4 column5 | each { |it| $it | into float } | math sum<\n>
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | select column3 column4 | each { |it| $it | into float } | math sum<\n>
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | select column3 column4 | each { |it| [($it.column3 | into float) ($it.column4 | into float)] } | math sum<\n>
bat 400450_20231005030003JCSV.csv
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | select column3 column4 | each { |it| [($it.column3 | into float) ($it.column4 | into float)] } | math sum<\n>
open 400450_20231005030003JCSV.csv --raw | lines | split column ';'
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | select column3 column4 | each { |it| $it | into float } | math sum<\n>
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | select column3 column4 | math sum<\n>
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | select column3 column4
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | select column4 column5
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | select column4 column5 column6
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | select column4 column5 column6 column7
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | select column5 column6
nano 400450_20231005030003JCSV.csv
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | select column5 column6 | math sum column 5
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | select column5 column6 | math sum column 5 | math sum column 6
open 400450_20231005030003JCSV.csv --raw | <\n>lines | <\n>split column ';' | <\n>select column5 | <\n>math sum column5
help math
help math sum
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | select column5 column6
open 400450_20231005030003JCSV.csv --raw | <\n>lines | <\n>split column ';' | <\n>select column5 | <\n>each { math sum $it.column5 }<\n>
open 400450_20231005030003JCSV.csv --raw | <\n>lines | <\n>split column ';' | <\n>select column5 | <\n>math sum column5
open 400450_20231005030003JCSV.csv --raw | <\n>lines | <\n>split column ';' | <\n>select column5 | <\n>to int | <\n>math sum<\n>
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | select column5 column6
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | select column5
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | select column5 | get valor | math sum
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | get column5 | math sum
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | select column5
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | get column5
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | get column5 | math sum
open 400450_20231005030003JCSV.csv --raw | lines | --delimiter ';' | get column5 | math sum
open 400450_20231005030003JCSV.csv --raw --delimiter ';' | lines | get column5 | math sum
open 400450_20231005030003JCSV.csv --delimiter ';' | lines | get column5 | math sum
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | get column5 | math sum
open 400450_20231005030003JCSV.csv --delimiter ';' | get column5 | where $it.is_number() | math sum
nano 400450_20231005030003JCSV.csv
open 400450_20231005030003JCSV.csv --delimiter ';' | get column5 | where $it.is_number() | math sum
open 400450_20231005030003JCSV.csv | from csv --delimiter ';' | get column5 | where $it.is_number() | math sum
open 400450_20231005030003JCSV.csv | from csv --separator ';' | get column5 | where $it.is_number() | math sum
open 400450_20231005030003JCSV.csv | from csv --separator ';' | get column5 | math sum
cd tmp
ls
http get https://raw.githubusercontent.com/TobiEiss/nushell-example/main/medium/sales.csv
ls
http get https://raw.githubusercontent.com/TobiEiss/nushell-example/main/medium/sales.csv | from csv --separator ';'
http get https://raw.githubusercontent.com/TobiEiss/nushell-example/main/medium/sales.csv --raw | from csv --separator ';'
let sales = http get https://raw.githubusercontent.com/TobiEiss/nushell-example/main/medium/sales.csv --raw | from csv --separator ';'
$sales
cd
cd Saba
cd saba
z saba
pwd
cd saba
cd Documents/Saba/
ls
bat 400450_20231005030003JCSV.csv
open 400450_20231005030003JCSV.csv --raw | from csv --separator ';'
open 400450_20231005030003JCSV.csv --raw | from csv --separator ';' | select column4
open 400450_20231005030003JCSV.csv --raw | from csv --separator ';' | get 2300
bat 400450_20231005030003JCSV.csv
open 400450_20231005030003JCSV.csv --raw | from csv --separator ';' | get Total
open 400450_20231005030003JCSV.csv --raw | from csv --separator ';' | get Total | math sum
open 400450_20231005030003JCSV.csv --raw | from csv --separator ';' {| get Total | math sum}
open 400450_20231005030003JCSV.csv --raw | from csv --separator ';' | get Total
nano 400450_20231005030003JCSV.csv
open 400450_20231005030003JCSV.csv --raw | from csv --separator ';' | get Total | math sum
open 400450_20231005030003JCSV.csv --raw | <\n>from csv --separator ';' | <\n>get column5 | <\n>to int | <\n>math sum<\n>
help to
open 400450_20231005030003JCSV.csv --raw | <\n>from csv --separator ';' | <\n>get column5 | <\n>into int | <\n>math sum<\n>
open 400450_20231005030003JCSV.csv --raw | <\n>from csv --separator ';' | <\n>get Total | <\n>into int | <\n>math sum<\n>
open 400450_20231005030003JCSV.csv --raw | <\n>from csv --separator ';' | <\n>get Total<\n>
nano 400450_20231005030003JCSV.csv
open 400450_20231005030003JCSV.csv --raw | <\n>from csv --separator ';' | <\n>get Total<\n>
open 400450_20231005030003JCSV.csv --raw | from csv --separator ';' | get Total | into int | math sum<\n>
open 400450_20231005030003JCSV.csv --raw | from csv --separator ';' | get Total | math sum<\n>
http get https://raw.githubusercontent.com/TobiEiss/nushell-example/main/medium/sales.csv --raw | from csv --separator ';'
$sales
print $sales 
print $sales > sales.csv
wget https://raw.githubusercontent.com/TobiEiss/nushell-example/main/medium/sales.csv
bat sales.csv
open sales.csv --raw | from csv --separator ';' | get Total | math sum<\n>
open sales.csv --raw | from csv --separator ';' | get price | math sum<\n>
open 400450_20231005030003JCSV.csv --raw | from csv --separator ';' | get Bruto | math sum<\n>
open 400450_20231005030003JCSV.csv --raw | <\n>from csv --separator ';' | <\n>get Total | <\n>where $it != "" |  # Filtrar valores vacíos<\n>into int | <\n>math sum<\n>
open 400450_20231005030003JCSV.csv | from csv --separator ';' | get Total | where $it != "" | math sum
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | get column5 | math sum
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | get column5
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | get column5 | where $it != "" | math sum
open 400450_20231005030003JCSV.csv | from csv --separator ';' | get Total | where $it != "" | math sum
open 400450_20231005030003JCSV.csv --raw | from csv --separator ';' | get Total | where $it != "" | into int | math sum<\n>
open 400450_20231005030003JCSV.csv --raw | from csv --separator ';' | get columan4 | where $it != "" | into int | math sum<\n>
open 400450_20231005030003JCSV.csv --raw | from csv --separator ';' | get column4 | where $it != "" | into int | math sum<\n>
open 400450_20231005030003JCSV.csv --raw | from csv --separator ';' | get column5 | where $it != "" | into int | math sum<\n>
open 400450_20231005030003JCSV.csv --raw | from csv --separator ';' | get Total | where $it != "" | into int | math sum<\n>
cp 400450_20231005030003JCSV.csv 400450_20231005030003JCSV2.csv
nano 400450_20231005030003JCSV2.csv
open 400450_20231005030003JCSV.csv --raw | from csv --separator ';' | get Total | where $it != "" | into int | math sum<\n>
open 400450_20231005030003JCSV2.csv --raw | from csv --separator ';' | get Total | where $it != "" | into int | math sum<\n>
nano 400450_20231005030003JCSV2.csv
open 400450_20231005030003JCSV2.csv --raw | from csv --separator ';' | get column4 | where $it != "" | into int | math sum<\n>
open 400450_20231005030003JCSV2.csv --raw | from csv --separator ';' | select column4 | where $it != "" | into int | math sum<\n>
open 400450_20231005030003JCSV2.csv --raw | from csv --separator ';' | get column4
open 400450_20231005030003JCSV2.csv --raw | from csv --separator ';'
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | get column5 | math sum
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | get column5
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | get column5 | math sum
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | get column5
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | get Bruto | math sum
bat 400450_20231005030003JCSV.csv
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | get Bruto
open 400450_20231005030003JCSV.csv --raw | lines | split column ';'
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | get column5 | math sum
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | get column5 | into int | math sum
exit
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | get column5 | into int | math sum
bat 400450_20231005030003JCSV.csv
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | get Bruto | into int | math sum
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | get column5 | into int | math sum
bat 400450_20231005030003JCSV.csv
bat 400450_20231005030003JCSV2.csv
open 400450_20231005030003JCSV2.csv --raw | lines | split column ';' | get column5 | into int | math sum
open 400450_20231005030003JCSV2.csv --raw | lines | split column ';' | get column5
open 400450_20231005030003JCSV2.csv --raw | lines | split column ';' | get column5 | where $it != ""
open 400450_20231005030003JCSV2.csv --raw | lines | split column ';' | get column5 | where $it != "" | into int | math sum
open 400450_20231005030003JCSV2.csv --raw | lines | split column ';' | get column5 | default 0 | into int | math sum
open 400450_20231005030003JCSV2.csv --raw | lines | split column ';' | get column5 | into int | default | math sum
open 400450_20231005030003JCSV2.csv --raw | lines | split column ';' | get column5 | into int | default 0 | math sum
open 400450_20231005030003JCSV2.csv --raw | lines | split column ';' | get column5 | into int | math sum
open 400450_20231005030003JCSV2.csv --raw | lines | split column ';' | get column5 | where $it != "" | into int | math sum
open 400450_20231005030003JCSV2.csv --raw | from csv --separator ';' | select column4 | where $it != "" | into int | math sum<\n>
open 400450_20231005030003JCSV2.csv --raw | from csv --separator ';' | get column4 | where $it != "" | into int | math sum<\n>
open 400450_20231005030003JCSV2.csv --raw | from csv --separator ';' | get column4
open 400450_20231005030003JCSV2.csv --raw | from csv --separator ';' | select column4
open 400450_20231005030003JCSV2.csv --raw | from csv --separator ';'
open 400450_20231005030003JCSV2.csv --raw | from csv --separator ';' | select column4
open 400450_20231005030003JCSV2.csv --raw | from csv --separator ';' | get column4 | where $it != "" | into int | math sum<\n>
open 400450_20231005030003JCSV.csv --raw | lines | split column ';' | get Bruto | into int | math sum
open 400450_20231005030003JCSV2.csv --raw | lines | split column ';' | get column5 | where $it != "" | into int | math sum
open 400450_20231005030003JCSV2.csv --raw | lines | split column ';' | get column6 | where $it != "" | into int | math sum
open 400450_20231005030003JCSV2.csv --raw | lines | split column ';' | get column7 | where $it != "" | into int | math sum
bat 400450_20231005030003JCSV2.csv
open 400450_20231005030003JCSV2.csv --raw | lines | split column ';' | get column7 | where $it != "" | into int | math sum
open 400450_20231005030003JCSV2.csv --raw | lines | split column ';' | get column4 | where $it != "" | into int | math sum
exit
open 400450_20231005030003JCSV2.csv --raw | lines | split column ';' | get column4 | where $it != "" | into int | math sum
$sales
ls
ls | where type == file | sort-by { get name | path parse | get extensioo }
ls | where type == file | sort-by { get name | path parse | get extension }
ls --help
help
sys host | get hostname
help command
help commands
cal
cd Documents/Saba/
open 400450_20231005030003J.txt to csv > prueba.csv
open 400450_20231005030003J.txt to csv
open 400450_20231005030003J.txt | to csv > prueba.csv
open 400450_20231005030003J.txt | to csv
port
which yazi
exit
ls --threads
ls --threads | select modified | format date "%Y-%m-%d %H:%M:%S"
ls --threads | get modified | format date "%Y-%m-%d %H:%M:%S"
ls --threads | select name  type size | get modified | format date "%Y-%m-%d %H:%M:%S"
ls --threads | select name  type size modified | get modified | format date "%Y-%m-%d %H:%M:%S"
ls --threads | select name  type size modified | get modified | formatls | format --table | sort-by modified | format --table modified='%Y-%m-%d %H:%M:%S' date "%Y-%m-%d %H:%M:%S"
ls | format --table | sort-by modified | format --table modified='%Y-%m-%d %H:%M:%S'
ls --threads | select name  type size modified | get modified | format date "%Y-%m-%d %H:%M:%S"
ls --threads | select name  type size modified |format date "%Y-%m-%d %H:%M:%S"
ls | select name type size modified | each { |it| echo $it | update modified {date to-text $it.modified -f "%Y-%m-%d %H:%M:%S"} }<\n>
ls | select name type size modified | each { |it| $it | update modified (date to-text $it.modified -f "%Y-%m-%d %H:%M:%S") }<\n>
ls | update modified {format date %+}
ls | update modified {format date "%Y-%m-%d %H:%M:%S"}
ls --threads | select name  type size modified |format date "%Y-%m-%d %H:%M:%S"
ls --threads
ls --threads | select name  type size modified owner |format date "%Y-%m-%d %H:%M:%S"
ls --threads | select name  type size modified owner| format date "%Y-%m-%d %H:%M:%S"
ls --threads | select name  type size modified owner | format date "%Y-%m-%d %H:%M:%S"
ls | get name type size modified owner | update modified {format date "%Y-%m-%d %H:%M:%S"}<\n>
ls -l
ls | get name type size modified user | update modified {format date "%Y-%m-%d %H:%M:%S"}<\n>
ls -l | get name type size modified user | update modified {format date "%Y-%m-%d %H:%M:%S"}<\n>
ls | update modified {format date "%Y-%m-%d %H:%M:%S"}
ls -l | update modified {format date "%Y-%m-%d %H:%M:%S"}
ls -l | select name mode user size | update modified {format date "%Y-%m-%d %H:%M:%S"}
ls -l | select name mode user size modifie | update modified {format date "%Y-%m-%d %H:%M:%S"}
ls -l | select name mode user size modified | update modified {format date "%Y-%m-%d %H:%M:%S"}
ls -l | select name type mode user size modified | update modified {format date "%Y-%m-%d %H:%M:%S"}
ls -l | select name type mode user group size modified | update modified {format date "%Y-%m-%d %H:%M:%S"}
ls -l | select name type mode user group size modified | update modified {format date "%Y-%m-%d %H:%M:%S"} | sort-by name
ls -l | select name type mode user group size modified | update modified {format date "%Y-%m-%d %H:%M:%S"} | sort-by name --desc
ls -l | select name type mode user group size modified | update modified {format date "%Y-%m-%d %H:%M:%S"} | sort-by name -desc
ls -l | select name type mode user group size modified | update modified {format date "%Y-%m-%d %H:%M:%S"} | sort-by name --reverse
ls -l | select name type mode user group size modified | update modified {format date "%Y-%m-%d %H:%M:%S"} | sort-by modified
ls -l | select name type mode user group size modified | update modified {format date "%Y-%m-%d %H:%M:%S"}
ls -l | select name type mode user group size modified | update modified {format date "%Y-%m-%d %H:%M:%S"} | where type == file
ls -l | select name type mode user group size modified | update modified {format date "%Y-%m-%d %H:%M:%S"} | where type == dir
ls -l | select name type mode user group size modified | update modified {format date "%Y-%m-%d %H:%M:%S"} | where type == file
ls -l | select name type mode user group size modified | update modified {format date "%Y-%m-%d %H:%M:%S"}
help ls
ls -a
ls -la | select name type mode user group size modified | update modified {format date "%Y-%m-%d %H:%M:%S"}
ls -la | select name type mode user group size modified | update modified {format date "%Y-%m-%d %H:%M:%S"} | where name =~ /\.config/
ls -la | select name type mode user group size modified | update modified {format date "%Y-%m-%d %H:%M:%S"} | where name =~ /.config/
ls -la | select name type mode user group size modified | update modified {format date "%Y-%m-%d %H:%M:%S"} | where name =~ .config
51 | describe
hola | describe
"hola" | describe
5.1 | describe
0xff | describe
10day/1sec
10day / 1sec
1day / 1sec
1day / 1min
let year = (<\n>    "10/18/2024" |<\n>    parse "{month}/{day}/{year}" |<\n>    get year<\n>)
$year
1..10 | each {$in * 2}
ls | update name {|file| $file.name | str upcase}
ls | update name {str upcase}
ls | table
exit
ls -la | select name type mode user group size modified | update modified {format date "%Y-%m-%d %H:%M:%S"}
exit
aliases
scope aliases
nvim ~/.config/nushell/config.nu
scope aliases
exit
scope aliases
ll
ls -la | select name type mode user group size modified | update modified {format date "%Y-%m-%d %H:%M:%S"}
nvim ~/.config/nushell/config.nu
yazi
l
ll
nvim ~/.config/nushell/config.nu
ll 
scope aliases
nvim ~/.config/nushell/config.nu
exit
la
scope aliases
nvim ~/.config/nushell/config.nu
exit
aliases
scope aliases
exit
nvim ~/.config/nushell/config.nu
exit
nvim ~/.config/nushell/config.nu
exit
nvim ~/.config/nushell/config.nu
exit
la
def greet [name:str] {<\n>    echo "Hola, $name! ¿Cómo estás hoy?"<\n>}<\n>
def greet [name:string] {<\n>    echo "Hola, $name! ¿Cómo estás hoy?"<\n>}<\n>
greet "Samuel"
def greet [name:string] {<\n>    echo "Hola, $name ¿Cómo estás hoy?"<\n>}<\n>
greet "Samuel"
def greet [name:string] {<\n>    echo "Hola, ($name)! ¿Cómo estás hoy?"<\n>}<\n>
greet "Samuel"
def greet [name:string] {<\n>    $"Hola, ($name)! ¿Cómo estás hoy?"<\n>}<\n>
greet "Samuel"
la
ls
cd nushell
$nu.env-path
nvim ~/.config/nushell/config.nu
nvim ~/.config/nushell/env.nu
exit
cd ~/.config/nushell/
ls -l
cd
cd nushell
nvim ~/.config/nushell/env.nu
ls
ls -a
nvim ~/.config/nushell/config.nu
source .zoxide.nu
cd nushell
cd ~/.config/nushell/
cd
cd nushell
exit
cd nushell
cd .config/nushell/
ls -l
cd ~/.config/nushell/
ls
bat config.nu
$nu.env-path
nvim ~/.config/nushell/env.nu
$nu.config-path
nvim ~/.config/nushell/config.nu
exit
cd ~/.config/nushell/
cd
cd nushell
let zoxide_completer = {|spans|<\n>    $spans | skip 1 | zoxide query -l ...$in | lines | where {|x| $x != $env.PWD}<\n>}
cd
cd ~/.config/nushell/
cd
cd nushell
z ~/.config/nushell/
cd
z nushell
cd
nvim ~/.config/nushell/config.nu
exit
cd nushell
cd ~/.config/nushell/
nvim ~/.config/nushell/config.nu
exit
cd nushell
zoxide --help
nvim ~/.config/nushell/config.nu
exit
cd nushell
z --cmd cd
zoxide --cmd cd
z --cmd cd
z nushell
cd nushell
cd ~/.config/nushell/
nvim ~/.config/nushell/config.nu
exit
cd nushell
z nushell
nvim ~/.config/nushell/config.nu
exit
z nushell
cd
cd nushell
nvim ~/.config/nushell/env.nu
nvim ~/.config/nushell/config.nu
exit
cd nushell
cd
cd saba
cd
cd maragarita
cd margarita
cd
nvim ~/.config/nushell/config.nu
nvim ~/.config/nushell/env.nu
bat .zoxide.nu
chezmois add ~/.config/nushell/
chezmoi add ~/.config/nushell/
ls ~/.config/nushell/
exit
chezmoi cd
exit
fzf
fzf --preview '''bat --style=numbers --color=always {}''' | xargs -n1 nvim
nvim ~/.config/nushell/env.nu
nvim ~/.config/nushell/config.nu
exit
fzn
lla
exit
aliases
exit
sys
sys host
sys host | get hostname
ls -
ls
open README.md
open tmux-client-83289.log
cd tmp/
ls
open macchiato.toml
ls
yazi
cd ..
cd testing/bbdd/
ls
open docker-compose.yml
cd ..
ls -l
ls
cd ..
ls
open Brewfile
yazi
open .luarc.json
ls | sort-by size | first 5 | skip 2
ls | sort-by size | first 10 | skip 2
ls | sort-by name | nth 5
ls | sort-by name | n-th 5
ls | sort-by name
ls | sort-by name | nth 5
ls | sort-by name | row 5
ls | sort-by name | rows 5
ls | sort-by name | nth 5
help nth 
help n-th 
ls | autoview
config
config env
config nu
config get edit_mode 
config
config path
echo 
echo $nu.path
echo env-path
exit
ls | autoview
nvim ~/.config/nushell/config.nu
onfig set path $nu.path
config set path $nu.path
1+3
1 + 3
"gallinagallo" =~ "gallo"
ls | where size > 10kb
ls | where {|$it| $it.size > 10kb }
echo $nu.env
$nu.env
echo $nu.env
echo $nu
echo $nu.env
$env | table 
^ls
^ls -l
^ls -la
ls -la | select name type mode user group size modified | update modified {format date "%Y-%m-%d %H:%M:%S"}
ls -la
ls --long --all 
str "luz"
str
autoview
du
du --help
du -a
du --help
du Downloads/
wc -l Brewfile 
bat Brewfile | first 5 
open Brewfile --raw | first 5 
open Brewfile | first 5 
cat Brewfile | first 5 
cat Brewfile | keep 5 
cat Brewfile | first  
bat Brewfile | first
bat Brewfile
size Brewfile | first 5 
size Brewfile
(http get https://api.chucknorris.io/jokes/random).value
bat Brewfile
bat --number Brewfile
bat --number Brewfile --line-range
bat --plain Brewfile
sshs
$env
$env | table 
$env.APPDATA
$env.EDITOR
config nu
df -h | str replace "Mounted on" Mounted_On | detect columns
df -h | str replace "Mounted on" Mounted_On | from ssv --aligned-columns --minimum-spaces 1
'echo Hello' | zsh -c $in
echo '{"title": "jq vs Nushell", "publication_date": "2023-11-20"}' | jq -r '.'
'{"title": "jq vs Nushell", "publication_date": "2023-11-20"}'<\n>| from json
nu --version
brew upgrade nushell
"Amélie Amelie" | str stats
exit
spf
exit
df -h | str replace "Mounted on" Mounted_On | detect columns
exit
"22/10/2024" | parse "{day}/{month}/{year}" | get year
"22/10/2024" | parse "{day}/{month}/{year}" | get month year
"22/10/2024" | parse "{day}/{month}/{year}" | get day month year
ssh sabaext
exit
brew search opera
brew info opera
ls | where size > 100KB | to json
sys columns
sys | columns
http get https://raw.githubusercontent.com/TobiEiss/nushell-example/main/medium/sales.csv --raw | from csv --separator ';'
http get https://phoronix.com | query web -a 'header'
http get https://phoronix.com | query web -q 'header'
?  query web
? query web
query web
exit
sk --preview 'bat --style=numbers --color=always {}' | xargs -n1 nvim
^fzn
fzf --preview '\''bat --style=numbers --color=always {}'\'' | xargs -n1 nvim
fzf --preview '\''bat --style=numbers --color=always {}'\'' | xargs -n1 nvim .config/
fzf --preview 'bat --style=numbers --color=always {}' | xargs -n1 nvim .config/
sk --preview 'bat --style=numbers --color=always {}' | xargs -n1 nvim
fzf --preview '\''bat --style=numbers --color=always {}'\'' | xargs -n1 nvim
cd Rechazados
z rechazados
cd Sana
cd Saba
cd Margarita/Rechazados/
ls -l
open `Rechazados TAG -25-09-2024(Revizado).xlsx` --sheet=6001 | save --format csv ejemplo.csv
open `Rechazados TAG -25-09-2024(Revizado).xlsx` | csv -n 6001 > prueba.csv
exit
ls -l
exit
'export VAR="Hello"' | zsh -c $in
print $env.VAR
'echo Hello' | zsh -c $in
exit
ls- l
ls
open `Rechazados TAG -25-09-2024(Revizado).xlsx`
open `Rechazados TAG -25-09-2024(Revizado).xlsx` | sheet 6001
open `Rechazados TAG -25-09-2024(Revizado).xlsx` | sheetname == 6001
open `Rechazados TAG -25-09-2024(Revizado).xlsx` | select 6001
sheetname ?
sheetname --help
help
help -h open
help open sheet
help open
open `Rechazados TAG -25-09-2024(Revizado).xlsx` | sheet
open `Rechazados TAG -25-09-2024(Revizado).xlsx` | get $sheet
open `Rechazados TAG -25-09-2024(Revizado).xlsx`
open `Rechazados TAG -25-09-2024(Revizado).xlsx` | get 6001
open `Rechazados TAG -25-09-2024(Revizado).xlsx` | columns
open `Rechazados TAG -25-09-2024(Revizado).xlsx` | columns == 6001
open `Rechazados TAG -25-09-2024(Revizado).xlsx` | columns | select 6001
open `Rechazados TAG -29-10-2024(Revizado).xlsx` --raw sheet_name "6001" | save "archivo.csv"<\n>
exirt
exit
^fzn
exit
http get https://phoronix.com | query web -q 'header'
http get https://jsonplaceholder.typicode.com/posts | take 3
http get https://jsonplaceholder.typicode.com/todos
http get https://jsonplaceholder.typicode.com/todos | take 1
http get https://jsonplaceholder.typicode.com/todos | take 199
http get https://jsonplaceholder.typicode.com/todos | take 2
http get https://jsonplaceholder.typicode.com/todos | select 2
http get https://jsonplaceholder.typicode.com/todos | select 199
http get https://jsonplaceholder.typicode.com/users
http get https://jsonplaceholder.typicode.com/photos
http get https://jsonplaceholder.typicode.com/photos | select url
$env
$env | table 
exit
carapace 
carapace --list
carapace --hwlp
carapace --help
get-env
^get-env
exit
carapace --list
kubectl :q
q
exit
whoami 
get-env
exit
wezterm shell-completion 
wezterm shell-completion ls
exit
> ps | sk --format {get name} --preview {}
ps | sk --format {get name} --preview {}
plugin list
gstat
gsettings 
cargo install nu_plugin_skim
> plugin add ~/.cargo/bin/nu_plugin_skim
plugin add ~/.cargo/bin/nu_plugin_skim
ps | sk --format {get name} --preview {}
exit
ps | sk --format {get name} --preview {}
nvim ~/.config/nushell/config.nu
sk --preview 'bat --style=numbers --color=always {}' | xargs -n1 nvim
sk | each { bat --style=numbers --color=always $it | nvim }<\n>
sk | each { bat --style=numbers --color=always (it) | nvim }<\n>
sk
nu_plugin_skim | each { bat --style=numbers --color=always (it) | nvim }<\n>
sk | each { bat --style=numbers --color=always (it) | nvim }<\n>
fzn
alias 
alias fzn
aliases
nvim ~/.config/nushell/config.nu
sk --preview '''bat --style=numbers --color=always {}''' | xargs -n1 nvim
sk | each { bat --style=numbers --color=always (it) | nvim }<\n>
nvim ~/.config/nushell/config.nu
sk --preview 'bat --style=numbers --color=always {}' | xargs -n1 nvim
sk --preview (bat --style=numbers --color=always {}) | xargs -n1 nvim
sk --preview ('bat --style=numbers --color=always {}') | xargs -n1 nvim
fzf --preview '''bat --style=numbers --color=always {}''' | xargs -n1 nvim
sk --preview '''bat --style=numbers --color=always {}''' | xargs -n1 nvim
sk --ansi -i -c 'rg --color=always --line-number "{}"'
exi
sk --ansi -i -c 'rg --color=always --line-number "{}"'
sk --preview (bat --style=numbers --color=always {}) | xargs -n1 nvim
sk --preview 'bat --style=numbers --color=always {}' | xargs -n1 nvim
exit
nvim ~/.config/nushell/config.nu
exit
sk --preview (bat --style=numbers --color=always {}) | xargs -n1 nvim
fzf --preview '''bat --style=numbers --color=always {}''' | xargs -n1 nvim
sk | each { bat --style=numbers --color=always (it) | nvim }<\n>
sk | each { bat --style=numbers --color=always (it) | nvim } .config/<\n>
sk | each { bat --style=numbers --color=always (it) | nvim }<\n>
sk
ps | sk --format {get name} --preview {}
sk --format {get name} --preview {}
ls | sk --format {get name} --preview {}
exit
la
nvim ~/.config/nushell/config.nu
exit
tmux
exit
zellij
exit
nvim ~/.config/nushell/config.nu
nvim ~/.config/nushell/env.nu
let carapace_completer = {|spans|<\n>    carapace $spans.0 nushell ...$spans | from json<\n>}
exit
nvim ~/.config/nushell/env.nu
open macupdate
which open
nvim ~/.config/nushell/config.nu
exit 
brew info opera
brew update
$env | table 
nvim ~/.config/nushell/config.nu
$env | table 
exit
$env | table 
nvim ~/.config/nushell/config.nu
exit
nvim ~/.config/nushell/config.nu
nvim ~/.config/nushell/env.nu
nvim ~/.config/nushell/config.nu
exit
$env | table 
nvim ~/.config/nushell/env.nu
source ~/.config/nushell/env.nu
$env | table 
echo $env.PATH<\n>
exit
echo $env.PATH | split row (char esep)<\n>
exit
nvim ~/.config/nushell/env.nu
nvim ~/.config/nushell/config.nu 
exit
grep -qexit
exit
ps | sk --format {get name} --preview {}
exit
[black red yellow green purple blue indigo] | each {|c|<\n>  match $c {<\n>    "black" => "classy"<\n>    "red" | "green" | "blue" => "fundamental"<\n>    "yellow" | "purple" => "vibrant"<\n>    _ => "innovative"<\n>  }<\n>}
exit
[black red yellow green purple blue indigo] | each {|c|<\n>  match $c {<\n>    "black" => "classy"<\n>    "red" | "green" | "blue" => "fundamental"<\n>    "yellow" | "purple" => "vibrant"<\n>    _ => "innovative"<\n>  }<\n>}
exit
ls
ls --all
eza --tree --level=2 --long --icons --git
aerospace list-windows --all | fzf --bind 'enter:execute(bash -c "aerospace focus --window-id {1}")+abort'
nvim ~/.config/nushell/config.nu 
nvim ~/.config/nushell/env.nu
ls /run/current-system/sw/bin/
echo $env.PATH<\n>
$env | table 
nix-info
nvim ~/.config/nushell/env.nu
chezmoi diff
chezmoi re-add
time
chezmoi diff
chezmoi re-add
EXIT
exit
ff
nvim ~/.config/nushell/config.nu 
exit
nvim ~/.config/nushell/config.nu 
nvim ~/.config/nushell/env.nu
exit
nvim ~/.config/nushell/config.nu 
exit
plugin list | where status == running
